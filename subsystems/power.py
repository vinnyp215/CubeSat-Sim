# File: power
# This file contains the Power subsystem class for the simulation

import numpy as np
import constants

class Power:
  """
  Initialises the Power subsystem for a spacecraft.
  
  Attributes:
    battery_capacity (float): Capacity of the battery in Watt-hours.
    solar_panel_area (float): Area of the solar panels in square meters.
    solar_panel_efficiency (float): Efficiency of the solar panels (0 to 1).
    
  Methods:
    __init__: Initializes the Power subsystem with given parameters.
    generate_power: Calculates power generated by solar panels based on sunlight exposure.
    consume_power: Consumes power from the battery based on system load.
    update_charge: Updates the battery charge based on generation and consumption.
  """

  def __init__(self, battery_capacity, solar_panel_area, solar_panel_efficiency):
    """
    Initializes the Power subsystem with given parameters.
    
    Args:
      battery_capacity (float): Capacity of the battery in Watt-hours.
      solar_panel_area (float): Area of the solar panels in square meters.
      solar_panel_efficiency (float): Efficiency of the solar panels (0 to 1).
    
    Returns:
      None
    """

    self.battery_capacity = battery_capacity  # in Watt-hours
    self.solar_panel_area = solar_panel_area  # in square meters
    self.solar_panel_efficiency = solar_panel_efficiency  # efficiency (0 to 1)
    self.current_charge = battery_capacity * 0.8  # Start at 80% charge

    return None
  
  def generate_power(self, sunlight_exposure):
    """
    Calculates power generated by solar panels based on sunlight exposure.
    
    Args:
      sunlight_exposure (float): Fraction of maximum sunlight exposure (0 to 1).
    
    Returns:
      power_generated (float): Power generated in Watts.
    """

    solar_constant = constants.solar_constant
    power_generated = self.solar_panel_area * self.solar_panel_efficiency * solar_constant * sunlight_exposure

    return power_generated
  
  def consume_power(self, load):
    """
    Consumes power from the battery based on system load.
    
    Args:
      load (float): Power consumption load in Watts.
    
    Returns:
      power_consumed (float): Power consumed in Watts.
    """

    power_consumed = min(load, self.current_charge * 3600)  # Convert Wh to Ws for consumption

    return power_consumed